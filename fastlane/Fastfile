# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.107.0"
default_platform :ios


# File is based on: http://pixyzehn.com/2016/08/24/setup-fastlane-with-circleci.html

platform :ios do

  before_all do
    if !is_ci
      ensure_git_status_clean
    end
    cocoapods(use_bundle_exec: !is_ci)
    #if is_ci
    #  # For preventing build number duplication error.
    #  increment_build_number(build_number: latest_testflight_build_number + 1)
    #else
    #  increment_build_number
    #end
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    #if !is_ci
    #  push_to_git_remote
    #end
  end

  error do |lane, exception|
    if is_ci
      slack(
         message: "'#{exception.message}'. Fastlane '#{lane}' errored",
         success: false
      )
    end
  end
  
  # lanes
  
  lane :test do
    scan(scheme:"TestApplication", device:"iPhone 7")
    if is_ci
      slack(
        message: "Testing completed."
      )
    end
  end
  
  lane :beta do
    #sigh(
    #  skip_install: true,
    #  development: false,
    #)
    build(scheme: "TestApplication")
    #pilot(
    #  ipa: "../TestApplication.ipa",
    #  skip_submission: true,
    #)
    #rocket
    #post_to_slack(scheme: scheme, destination: "TestFlight")
    clean_build_artifacts
    #commit_version
  end

  lane :release do |options|

    # match(type: "appstore")
    # snapshot
    ensure_git_branch(branch: 'development')
    scheme = options[:scheme]
    sigh(
      skip_install: true,
      development: false,
    )
    build(scheme: scheme)
    #deliver(force: true)
    # frameit
    rocket
    post_to_slack(scheme: scheme, destination: "iTunes Connect")
    #if !is_ci
    #  clean_build_artifacts
    #  commit_version
    #  add_tag_and_push
    #end
  end

  # Private lanes
  
  private_lane :fabric do |options|
    scheme = options[:scheme]
    sigh(
      skip_install: true,
      development: true
    )
    build(scheme: scheme)
    environment = scheme.upcase
    crashlytics(
      ipa_path: "../TestApplication.ipa",
      notes: "Running on #{environment}"
    )
    rocket
    post_to_slack(scheme: scheme, destination: "Crashlytics")
    clean_build_artifacts
    commit_version
  end
  
  private_lane :itc_testflight do |options|
    scheme = options[:scheme]
    sigh(
      skip_install: true,
      development: false,
    )
    build(scheme: scheme)
    pilot(
      ipa: "../TestApplication.ipa",
      skip_submission: true,
    )
    rocket
    post_to_slack(scheme: scheme, destination: "TestFlight")
    clean_build_artifacts
    commit_version
  end
  
  private_lane :itc do |options|
    ensure_git_branch(branch: 'release')
    scheme = options[:scheme]
    sigh(
      skip_install: true,
      development: false,
    )
    build(scheme: scheme)
    deliver(force: true)
    rocket
    post_to_slack(scheme: scheme, destination: "iTunes Connect")
    if !is_ci
      clean_build_artifacts
      commit_version
      add_tag_and_push
    end
  end
  
  # Util lane
  
  private_lane :build do |options|
    scheme = options[:scheme]
    gym(
      scheme: "#{scheme}",
      clean: true,
      silent: true,
      include_bitcode: false,
      workspace: "TestApplication.xcworkspace",
      output_directory: "../",
      output_name: "TestApplication.ipa",
      use_legacy_build_api: true # There's a bug in the new Xcode 7 API that causes problems. This forces use of the old API.
    )
  end
  
  private_lane :post_to_slack do |options|
    scheme = options[:scheme]
    version = get_version_number(xcodeproj: "TestApplication.xcodeproj")
    build = get_build_number(xcodeproj: "TestApplication.xcodeproj")
    environment = scheme.upcase
    destination = options[:destination]
    slack(
      message: "New :ios: *#{version}* (#{build}) running `#{environment}` has been submitted to *#{destination}*  :rocket:",
    )
  end

  private_lane :commit_version do
    build = Actions.lane_context[Actions::SharedValues::BUILD_NUMBER]
    commit_version_bump(
      message: "Build #{build}",
      force: true
    )
  end

  private_lane :add_tag_and_push do
    version = get_version_number(xcodeproj: "TestApplication.xcodeproj")
    add_git_tag(tag: version)
    push_git_tags
  end

end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
